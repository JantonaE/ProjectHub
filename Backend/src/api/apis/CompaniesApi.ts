/* tslint:disable */
/* eslint-disable */
/**
 * ProjectHub
 * Jesus Antona Espejo
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Company,
  HTTPValidationError,
  PPPOOutput,
} from '../models/index';
import {
    CompanyFromJSON,
    CompanyToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PPPOOutputFromJSON,
    PPPOOutputToJSON,
} from '../models/index';

export interface CreateCompanyCompaniesPostRequest {
    company: Company;
}

export interface DeleteCompanyCompaniesIdDeleteRequest {
    id: string;
}

export interface FindHighPortfoliosCompaniesPortfoliosIdGetRequest {
    id: string;
}

export interface FindOneCompanyCompaniesIdGetRequest {
    id: string;
}

export interface UpdateCompanyCompaniesIdPutRequest {
    id: string;
    company: Company;
}

/**
 * 
 */
export class CompaniesApi extends runtime.BaseAPI {

    /**
     * Crea un company y lo devuelve
     * Create Company
     */
    async createCompanyCompaniesPostRaw(requestParameters: CreateCompanyCompaniesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters['company'] == null) {
            throw new runtime.RequiredError(
                'company',
                'Required parameter "company" was null or undefined when calling createCompanyCompaniesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Companies/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters['company']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * Crea un company y lo devuelve
     * Create Company
     */
    async createCompanyCompaniesPost(requestParameters: CreateCompanyCompaniesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.createCompanyCompaniesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina el company con id pasado por parámetro
     * Delete Company
     */
    async deleteCompanyCompaniesIdDeleteRaw(requestParameters: DeleteCompanyCompaniesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteCompanyCompaniesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el company con id pasado por parámetro
     * Delete Company
     */
    async deleteCompanyCompaniesIdDelete(requestParameters: DeleteCompanyCompaniesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCompanyCompaniesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de companies
     * Find All Companies
     */
    async findAllCompaniesCompaniesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Company>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Companies/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CompanyFromJSON));
    }

    /**
     * Devuelve una lista de companies
     * Find All Companies
     */
    async findAllCompaniesCompaniesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Company>> {
        const response = await this.findAllCompaniesCompaniesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Devuelve los portfolios sin parent_id de company con id pasado por parámetro
     * Find High Portfolios
     */
    async findHighPortfoliosCompaniesPortfoliosIdGetRaw(requestParameters: FindHighPortfoliosCompaniesPortfoliosIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PPPOOutput>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findHighPortfoliosCompaniesPortfoliosIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Companies/Portfolios/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PPPOOutputFromJSON));
    }

    /**
     * Devuelve los portfolios sin parent_id de company con id pasado por parámetro
     * Find High Portfolios
     */
    async findHighPortfoliosCompaniesPortfoliosIdGet(requestParameters: FindHighPortfoliosCompaniesPortfoliosIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PPPOOutput>> {
        const response = await this.findHighPortfoliosCompaniesPortfoliosIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el company con id pasado por parámetro
     * Find One Company
     */
    async findOneCompanyCompaniesIdGetRaw(requestParameters: FindOneCompanyCompaniesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneCompanyCompaniesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * Devuelve el company con id pasado por parámetro
     * Find One Company
     */
    async findOneCompanyCompaniesIdGet(requestParameters: FindOneCompanyCompaniesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.findOneCompanyCompaniesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza el company con id pasado por parámetro y lo devuelve
     * Update Company
     */
    async updateCompanyCompaniesIdPutRaw(requestParameters: UpdateCompanyCompaniesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateCompanyCompaniesIdPut().'
            );
        }

        if (requestParameters['company'] == null) {
            throw new runtime.RequiredError(
                'company',
                'Required parameter "company" was null or undefined when calling updateCompanyCompaniesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters['company']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * Actualiza el company con id pasado por parámetro y lo devuelve
     * Update Company
     */
    async updateCompanyCompaniesIdPut(requestParameters: UpdateCompanyCompaniesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.updateCompanyCompaniesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
