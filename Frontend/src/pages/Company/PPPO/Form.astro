---

import PopUpError from "../../../components/PopUpError.jsx";
import { getUser } from "../../../lib/auth";
import * as lib from "../../../lib/lib"
import { lookForBrothersWithCode ,lookForBrothersAncestorWithCode,getStatesByType } from "../../../lib/lib";
import {formatDate,convertToISOFormat} from "../../../lib/utils.ts";

let parent_id = Astro.url.searchParams.get("parentId");
let update = Astro.url.searchParams.get("update");
let milestone = Astro.url.searchParams.get("milestone");
console.log("Milestone:");
console.log(milestone);
let updatePPPO = null;
let updateMilestone = null;
let pppoType;
let invalid_code;
let formSent=false;
let states;
let radioButton;
let company;
let user = await getUser();



if(user == null){
  console.log("redirect");
  return Astro.redirect('/');
}else{
  company = user.company;
}

if (parent_id == null && update == ""){
      parent_id = "";
      // SOLO PODRAS ELEGIR PORTFOLIO
      pppoType = -1;
      states = await lib.getStatesByType(0);

  }else if(update == ""){ // OTRAS OPCIONES A ELEGIR
      const pppo = await lib.getPPPOById(parent_id);
      pppoType = pppo.PPPO;
      states = await lib.getStatesByType(pppoType);
      
  }else if(update != ""){ // Update of PPPO
    if(milestone != null){
      updateMilestone = await lib.getMilestoneById(update);
      updatePPPO = await lib.getPPPOById(parent_id);
    }else{
      updatePPPO = await lib.getPPPOById(update);
      
    }
    states = await lib.getStatesByType(updatePPPO.PPPO);
    
  }

console.log(updateMilestone);

// Get the possible managers
const persons = await lib.getPersonsByCompany(company);


if (Astro.request.method === "POST") {
  try {
    console.log("Pulsado");
    // OBTENER COMPANY DE LA SESION Y padre
    const data = await Astro.request.formData();

    radioButton = Number(data.get("radio1"));
    
    const code = data.get("code").toString();
    // Look if there is a brother with the same code -> Cant create

    if(milestone == null){
      if(parent_id == ""){
      invalid_code = await lookForBrothersAncestorWithCode(company,code);
      }else{
        invalid_code = await lookForBrothersWithCode(parent_id,code);
      }
    }
    
    

    
      console.log("Valido");
      console.log(invalid_code);
      const title = data.get("title").toString();
      const description = data.get("description").toString();
      console.log(description);
      const strategic_goal = data.get("strategic_goal").toString();
      const planned_value = Number(data.get("planned_value"));
      const actual_cost = Number(data.get("actual_cost"));
      const earned_value = Number(data.get("earned_value"));
      
      let start_date;
      let finish_date;
      let start_real_date;
      let finish_real_date;
      let real_date;
      let planned_date;
      if(milestone == null){
        
        start_date = formatDate(data.get("start_date"));
        finish_date = formatDate(data.get("finish_date"));
        start_real_date = formatDate(data.get("start_real_date"));
        finish_real_date = formatDate(data.get("finish_real_date"));
        
      }else{
        real_date = formatDate(data.get("real_date"));
        planned_date = formatDate(data.get("planned_date"));
      }
      
    

      const risk = Number(data.get("risk"));
      const priority = Number(data.get("priority"));
      const internal_manager = data.get("internal_manager").toString();
      const external_manager = data.get("external_manager").toString();
      let state = data.get("state").toString();
      // Cambiar:
      
      if(milestone == null){
        console.log("UpdatePPPO:");
        console.log(updatePPPO);
        if(updatePPPO == null){ // Creation
          console.log("Creacion");
          const res = await lib.createPPPO(
            radioButton,
            title,
            description,
            code,
            strategic_goal,
            planned_value,
            actual_cost,
            earned_value,
            start_date,
            finish_date,
            start_real_date,
            finish_real_date,
            risk,
            priority,
            internal_manager,
            external_manager,
            company,
            parent_id,
            state
        );
        
          // Internal Manager update pppo
          // External Manager update pppo
          if(external_manager != ""){
            await lib.updatePersonExternalManager(res.idPPPO,external_manager);
          }
          await lib.updatePersonInternalManager(res.idPPPO,internal_manager);
          

        
          formSent = true;
          if (parent_id == ""){
            return Astro.redirect("/Company/PPPOs");
          }else{
            return Astro.redirect(`/Company/PPPO/Sons?parentId=${parent_id}`);
          }
          
        }else{ //Update
          console.log("Update");
          console.log(updatePPPO.code);
          const updatedData = {
          idPPPO: updatePPPO.idPPPO,
          code: updatePPPO.code,
          company: updatePPPO.company,
          parent_id: updatePPPO.parent_id,
          title: title,
          description: description,
          planned_value: planned_value,
          actual_cost: actual_cost,
          start_date: start_date,
          finish_date: finish_date,
          start_real_date: start_real_date,
          finish_real_date: finish_real_date,
          risk: risk,
          priority: priority,
          strategic_goal: strategic_goal,
          earned_value: earned_value,
          ROI: updatePPPO.ROI,
          cost_benefit: updatePPPO.cost_benefit,
          PPPO: updatePPPO.PPPO,
          state: state,
          internal_manager: internal_manager,
          external_manager: external_manager 
          };
          console.log("Estamo ready");
          console.log(updatedData);
          // Llamar a la función updatePPPO con el ID del PPPO y los datos actualizados
          await lib.updatePPPO(update, updatedData);
          formSent = true;
          
          console.log("Anteriores managers");
          console.log(updatePPPO.internal_manager);
          console.log(updatePPPO.external_manager);
          console.log("Anteriores managers");
          // Hay q eliminar los anteriores de la lista
          if(external_manager != ""){
      
            await lib.updatePersonExternalManager(updatedData.idPPPO,external_manager);
          }
          if(external_manager != updatePPPO.external_manager){
            await lib.removePersonExternalManager(updatedData.idPPPO,updatePPPO.external_manager);
          }

          if(internal_manager != updatePPPO.internal_manager){
            await lib.removePersonInternalManager(updatedData.idPPPO,updatePPPO.internal_manager);
            await lib.updatePersonInternalManager(updatedData.idPPPO,internal_manager);
          }
          
          
          return Astro.redirect(`/Company/PPPO?idPPPO=${update}`);
          
        }
      }else{ // MILESTONE
        if(updateMilestone == null){ // Creation
          console.log("Creacion");
          const res = await lib.createMilestone(
            title,
            description,
            code,
            strategic_goal,
            planned_value,
            actual_cost,
            earned_value,
            planned_date,
            real_date,
            risk,
            priority,
            internal_manager,
            external_manager,
            company,
            parent_id,
            state
        );
        
          // Internal Manager 
          // External Manager 
          /*
          if(external_manager != ""){
            await lib.updatePersonExternalManager(res.idPPPO,external_manager);
          }
          await lib.updatePersonInternalManager(res.idPPPO,internal_manager);
          */

        
          formSent = true;
          
          return Astro.redirect(`/Company/PPPO?idPPPO=${parent_id}`);
          
          
        }else{ //Update
          console.log("Update");
          const updatedData = {
          idMilestone: updateMilestone.idMilestone,
          code: updateMilestone.code,
          company: updateMilestone.company,
          parent_id: updateMilestone.parent_id,
          title: title,
          description: description,
          planned_value: planned_value,
          actual_cost: actual_cost,
          planned_date: planned_date,
          real_date: real_date,
          risk: risk,
          priority: priority,
          strategic_goal: strategic_goal,
          earned_value: earned_value,
          ROI: updateMilestone.ROI,
          cost_benefit: updateMilestone.cost_benefit,
          state: state,
          internal_manager: internal_manager,
          external_manager: external_manager 
          };
          console.log("Estamo ready");
          console.log(updatedData);
          // Llamar a la función updatePPPO con el ID del PPPO y los datos actualizados
          await lib.updateMilestone(update, updatedData);
          formSent = true;
          // Internal Manager update pppo
          // External Manager update pppo
          /*
          if(external_manager != ""){
            await lib.updatePersonExternalManager(updatedData.idMilestone,external_manager);
          }
          await lib.updatePersonInternalManager(updatedData.idMilestone,internal_manager);
          */
          return Astro.redirect(`/Company/PPPO?idPPPO=${parent_id}`);

          
        }
      }
      

      }
      catch (error) {
        if (error instanceof Error) {
          console.error(error.message);
        }
      }
  } 




console.log("hey");
---

<div class="flex items-center justify-center p-12">
  
  <div class="mx-auto w-full max-w-[550px] bg-white">
    {invalid_code && update == "" && <PopUpError client:load />}
    
    <form action="" method="POST">
      {
         updatePPPO == null && milestone == null && (
        <div class="mb-5">
        <label class="mb-3 block text-base font-medium text-[#07074D]">
          What object would you like to create?
        </label>
        <div class="flex items-center space-x-6">
          <div class="flex items-center">
            { parent_id === "" || pppoType === 0 ? 
            <input
              type="radio"
              name="radio1"
              id="radioButtonPortfolio"
              class="h-5 w-5"
              value="0"
            /> : 
            <input
              type="radio"
              name="radio1"
              id="radioButtonPortfolio"
              class="h-5 w-5"
              value="0"
              disabled
            />
            }
            <label
              for="radioButtonPortfolio"
              class="pl-3 text-base font-medium text-[#07074D]"
            >
              Portfolio
            </label>
          </div>

          <div class="flex items-center">
            { pppoType < 2 && pppoType != -1 ? 
            <input
            type="radio"
            name="radio1"
            id="radioButtonProgram"
            value="1"
            class="h-5 w-5"
            /> : 
            <input
            type="radio"
            name="radio1"
            id="radioButtonProgram"
            value="1"
            class="h-5 w-5"
            disabled
            />
            }
            <label
              for="radioButtonProgram"
              class="pl-3 text-base font-medium text-[#07074D]"
            >
              Program
            </label>
          </div>

          <div class="flex items-center">
            { pppoType < 3 && pppoType != -1 ? 
              <input
              type="radio"
              name="radio1"
              id="radioButtonProject"
              class="h-5 w-5"
              value="2"
            /> : 
            <input
              type="radio"
              name="radio1"
              id="radioButtonProject"
              class="h-5 w-5"
              value="2"
              disabled
            />
              }
            
            <label
              for="radioButtonProject"
              class="pl-3 text-base font-medium text-[#07074D]"
            >
              Project
            </label>
          </div>

          <div class="flex items-center">
            { pppoType < 2 && pppoType != -1 ? 
              <input
              type="radio"
              name="radio1"
              id="radioButtonOperation"
              class="h-5 w-5"
              value="3"
            /> : 
            <input
              type="radio"
              name="radio1"
              id="radioButtonOperation"
              class="h-5 w-5"
              value="3"
              disabled
            />
              }
            
            <label
              for="radioButtonOperation"
              class="pl-3 text-base font-medium text-[#07074D]"
            >
              Operation
            </label>
          </div>
        </div>
      </div>
        )
      }
      
      <div class="mb-5">
        <label
          for="title"
          class="mb-3 block text-base font-medium text-[#07074D]"
          
        >
        Title
        </label>
        {
          milestone == null && (
          <input
          type="text"
          name="title"
          id="title"
          value={updatePPPO ? updatePPPO.title : ""}
          placeholder="Title"
          minlength="3"
          maxlength="50"
          required
          class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
        />
          )
        }
        {
          milestone && (
          <input
          type="text"
          name="title"
          id="title"
          value={updateMilestone ? updateMilestone.title : ""}
          placeholder="Title"
          minlength="3"
          maxlength="50"
          required
          class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
        />
          )
        }
        
      </div>
      <div class="mb-5">
        <label
          for="description"
          class="mb-3 block text-base font-medium text-[#07074D]"
        >
        Description
        </label>
        {
          milestone == null && (
          <textarea name="description" id="description" placeholder="Description" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md" maxlength="300">{updatePPPO ? updatePPPO.description : ""}</textarea>

          )
        }
        {
          milestone && (
          <textarea name="description" id="description" placeholder="Description" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md" maxlength="300">{updateMilestone ? updateMilestone.description : ""}</textarea>

          )
        }         
          
      </div>
      
      <div class="mb-5">
        <label
          for="title"
          class="mb-3 block text-base font-medium text-[#07074D]"
          
        >
        Code
        </label>
        {
          milestone == null &&  (
          <input
          type="text"
          name="code"
          id="code"
          placeholder="Code"
          value={updatePPPO ? updatePPPO.code : ""}
          minlength="2"
          maxlength="10"
          
          class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
        />
          )
        }
        
        {
          milestone && (
          <input
          type="text"
          name="code"
          id="code"
          placeholder="Code"
          value={updateMilestone ? updateMilestone.code : ""}
          minlength="2"
          maxlength="10"

          class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
        />
          )
        }
        
        
      </div>
      <div class="mb-5">
        <label
          for="title"
          class="mb-3 block text-base font-medium text-[#07074D]"
          
        >
        Strategic Goal
        </label>
        {
          milestone == null && (
          <input
          type="text"
          name="strategic_goal"
          id="strategic_goal"
          placeholder="Strategic Goal"
          value={updatePPPO ? updatePPPO.strategic_goal: ""}
          minlength="5"
          maxlength="50"
          required
          class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
        />
          )
        }
        {
          milestone && (
          <input
          type="text"
          name="strategic_goal"
          id="strategic_goal"
          placeholder="Strategic Goal"
          value={updateMilestone ? updateMilestone.strategic_goal: ""}
          minlength="5"
          maxlength="50"
          required
          class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
        />
          )
        }
        
      </div>
      
      <div class="-mx-3 flex flex-wrap">
        <div class="w-full px-3 sm:w-1/3">
          <div class="mb-5">
            <label
              for="planned_value"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Planned Value
            </label>
            {
              milestone == null && (
              <input
              type="number"
              min="0"
              name="planned_value"
              value={updatePPPO ? updatePPPO.planned_value : ""}
              id="planned_value"
              placeholder="Enter your P.V"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
              )
            }
            {
              milestone && (
              <input
              type="number"
              min="0"
              name="planned_value"
              value={updateMilestone ? updateMilestone.planned_value : ""}
              id="planned_value"
              placeholder="Enter your P.V"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
              )
            }
            
          </div>
        </div>
        <div class="w-full px-3 sm:w-1/3">
          <div class="mb-5">
            <label
              for="actual_cost"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Actual Cost
            </label>
            {
              milestone == null && (
              <input
              type="number"
              min="0"
              value={updatePPPO && updatePPPO.actual_cost != 0 ? updatePPPO.actual_cost : ""}
              name="actual_cost"
              id="actual_cost"
              placeholder="Enter your A.C"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
              ) 
            }
            {
              milestone && (
              <input
              type="number"
              min="0"
              value={updateMilestone && updateMilestone.actual_cost != 0 ? updateMilestone.actual_cost : ""}
              name="actual_cost"
              id="actual_cost"
              placeholder="Enter your A.C"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
              )
            }
            
          </div>
        </div>
        <div class="w-full px-3 sm:w-1/3">
          <div class="mb-5">
            <label
              for="earned_value"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Earned Value
            </label>
            {
              milestone == null && (
              <input
              type="number"
              min="0"
              value={updatePPPO && updatePPPO.earned_value != 0 ? updatePPPO.earned_value : ""}
              name="earned_value"
              id="earned_value"
              placeholder="Enter your E.V"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
              ) 
            }
            {
              milestone && (
              <input
              type="number"
              min="0"
              value={updateMilestone && updateMilestone.earned_value != 0 ? updateMilestone.earned_value : ""}
              name="earned_value"
              id="earned_value"
              placeholder="Enter your E.V"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
              )
            }
            
          </div>
        </div>
      </div>
      {
        milestone == null && (
        <div class="-mx-3 flex flex-wrap">
        <div class="w-full px-3 sm:w-1/2">
          <div class="mb-5">
            <label
              for="date"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
             Planned Start Date
            </label>
            <input
              required
              type="date"
              value={
                updatePPPO && updatePPPO.start_date && convertToISOFormat(updatePPPO.start_date) !== "2100-12-11"
                ? convertToISOFormat(updatePPPO.start_date)
                : ""
            }
              name="start_date"
              id="start_date"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
          </div>
        </div>
        <div class="w-full px-3 sm:w-1/2">
          <div class="mb-5">
            <label
              for="date"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Planned Finish Date
            </label>
            <input
              type="date"
              value={
                updatePPPO && convertToISOFormat(updatePPPO.finish_date) !== "2100-12-11"
                ? convertToISOFormat(updatePPPO.finish_date)
                : ""
            }
              name="finish_date"
              id="finish_date"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
          </div>
        </div>
      </div>
      <div class="-mx-3 flex flex-wrap">
        <div class="w-full px-3 sm:w-1/2">
          <div class="mb-5">
            <label
              for="date"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
             Start Real Date
            </label>
            <input
              type="date"
              value={
                updatePPPO && convertToISOFormat(updatePPPO.start_real_date) !== "2100-12-11"
                ? convertToISOFormat(updatePPPO.start_real_date)
                : ""
            }
              name="start_real_date"
              id="start_real_date"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
          </div>
        </div>
        <div class="w-full px-3 sm:w-1/2">
          <div class="mb-5">
            <label
              for="date"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Finish Real Date
            </label>
            <input
              type="date"
              name="finish_real_date"
              value={
                updatePPPO && convertToISOFormat(updatePPPO.finish_real_date) !== "2100-12-11"
                ? convertToISOFormat(updatePPPO.finish_real_date)
                : ""
            }
              id="finish_real_date"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
          </div>
        </div>
      </div>
        )
      }
      {
        milestone && (
        <div class="-mx-3 flex flex-wrap">
        <div class="w-full px-3 sm:w-1/2">
          <div class="mb-5">
            <label
              for="date"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
             Planned Date
            </label>
            <input
              required
              type="date"
              value={
                updateMilestone && updateMilestone.planned_date && convertToISOFormat(updateMilestone.planned_date) !== "2100-12-11"
                ? convertToISOFormat(updateMilestone.planned_date)
                : ""
            }
              name="planned_date"
              id="planned_date"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
          </div>
        </div>
        <div class="w-full px-3 sm:w-1/2">
          <div class="mb-5">
            <label
              for="date"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Real Date
            </label>
            <input
              type="date"
              value={
                updateMilestone && convertToISOFormat(updateMilestone.real_date) !== "2100-12-11"
                ? convertToISOFormat(updateMilestone.real_date)
                : ""
            }
              name="real_date"
              id="real_date"
              class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md"
            />
          </div>
        </div>
      </div>
      
      
        )
      }
       
      { 
      milestone == null && (

        <div class="mb-5 pt-3">
        <div class="-mx-3 flex flex-wrap">
          <div class="w-full px-3 sm:w-1/2">
            <div class="mb-5">
              <label
              for="text"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Risk
            </label>
            <div class="flex justify-between">
              <a class="text-left">Low</a>
              <a class="text-center">Medium</a>
              <a class="text-right">High</a>
            </div>
              <input
                required
                type="range"
                name="risk"
                id="risk"
                value={update ? updatePPPO.risk : ""}
                min="0" max="2" step="1"
                class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium"
              />
            </div>
          </div>
          <div class="w-full px-3 sm:w-1/2">
            <div class="mb-5">
              <label
              for="text"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Priority
            </label>
            <div class="flex justify-between">
              <a class="text-left">Low</a>
              <a class="text-center">Medium</a>
              <a class="text-right">High</a>
            </div>
            <input
            required
            type="range"
            name="priority"
            id="priority"
            value={update ? updatePPPO.priority : ""}
            min="0" max="2" step="1"
            class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium"
          />
            </div>
          </div>
        </div>
        </div> 
        )
      }
      {
        milestone && (
        <div class="mb-5 pt-3">
        <div class="-mx-3 flex flex-wrap">
          <div class="w-full px-3 sm:w-1/2">
            <div class="mb-5">
              <label
              for="text"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Risk
            </label>
            <div class="flex justify-between">
              <a class="text-left">Low</a>
              <a class="text-center">Medium</a>
              <a class="text-right">High</a>
            </div>
              <input
                required
                type="range"
                name="risk"
                id="risk"
                value={update ? updateMilestone.risk : ""}
                min="0" max="2" step="1"
                class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium"
              />
            </div>
          </div>
          <div class="w-full px-3 sm:w-1/2">
            <div class="mb-5">
              <label
              for="text"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Priority
            </label>
            <div class="flex justify-between">
              <a class="text-left">Low</a>
              <a class="text-center">Medium</a>
              <a class="text-right">High</a>
            </div>
            <input
            required
            type="range"
            name="priority"
            id="priority"
            value={update ? updateMilestone.priority : ""}
            min="0" max="2" step="1"
            class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium"
          />
            </div>
          </div>
        </div> 
        </div>
        )
      }
      
      <div class="mb-5 pt-3">
        <div class="-mx-3 flex flex-wrap">
          <div class="w-full px-3 sm:w-1/2">
            <div class="mb-5">
              <label
              for="text"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              Internal Manager
            </label>
            {
              milestone == null && (
              <select required name="internal_manager" id="internal_manager" 
             class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md">
              {
                persons && persons.map((person) => (
                  <option value={person.idPerson}
                  selected={update && person.idPerson === updatePPPO.internal_manager}
                  >{person.name}</option>
                ))
              }
              
            </select>
              )
            }
            {
              milestone && (
              <select required name="internal_manager" id="internal_manager" 
             class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md">
              {
                persons && persons.map((person) => (
                  <option value={person.idPerson}
                  selected={update && person.idPerson === updateMilestone.internal_manager}
                  >{person.name}</option>
                ))
              }
              
            </select>
              )
            }
            
              
            </div>
          </div>
          <div class="w-full px-3 sm:w-1/2">
            <div class="mb-5">
              <label
              for="text"
              class="mb-3 block text-base font-medium text-[#07074D]"
              
            >
              External Manager
            </label>
            {
              milestone == null && (
              <select name="external_manager" id="external_manager" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md">
              <option value="">None</option>
              {
                persons && persons.map((person) => (
                  <option value={person.idPerson}
                  selected={update && person.idPerson === updatePPPO.external_manager}>{person.name}</option>
                ))
              }
              
            </select>
              )
            }
            {
              milestone && (
              <select name="external_manager" id="external_manager" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md">
              <option value="">None</option>
              {
                persons && persons.map((person) => (
                  <option value={person.idPerson}
                  selected={update && person.idPerson === updateMilestone.external_manager}>{person.name}</option>
                ))
              }
              
            </select>
              )
            }
            
              
            </div>
          </div>
          <div class="w-full px-3 sm:w-1/2">
            <div class="mb-5">
              <label
              for="text"
              class="mb-3 block text-base font-medium text-[#07074D]"
            >
              States
            </label>
            {
              milestone == null && (
              <select required name="state" id="state" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md">
              {
                states && states.map((state) => (
                  <option value={state.idState}
                  selected={update && updatePPPO.state == state.idState}>{state.state}</option>
                ))
              }
              
            </select>
              ) 
            }
            {
              milestone && (
              <select required name="state" id="state" class="w-full rounded-md border border-[#e0e0e0] bg-white py-3 px-6 text-base font-medium text-[#6B7280] outline-none focus:border-[#6A64F1] focus:shadow-md">
              {
                states && states.map((state) => (
                  <option value={state.idState}
                  selected={update && updateMilestone.state == state.idState}>{state.state}</option>
                ))
              }
              
            </select>
              )
            }
              
            </div>
          </div>
          
        </div> 
        
      

      <div>

        {
          updatePPPO == null && milestone == null && (

          
          <button
          class="hover:shadow-form w-full rounded-md bg-[#6A64F1] py-3 px-8 text-center text-base font-semibold text-white outline-none"
        >
          Create
        </button>
          )
        }
        {
          updatePPPO != null && milestone == null &&  (
          <button
          class="hover:shadow-form w-full rounded-md bg-[#6A64F1] py-3 px-8 text-center text-base font-semibold text-white outline-none"
        >
          Update
        </button>
          )
        }

        {
          updateMilestone == null && milestone != null && (

          
          <button
          class="hover:shadow-form w-full rounded-md bg-[#6A64F1] py-3 px-8 text-center text-base font-semibold text-white outline-none"
        >
          Create
        </button>
          )
        }
        {
          updateMilestone != null && milestone != null &&  (
          <button
          class="hover:shadow-form w-full rounded-md bg-[#6A64F1] py-3 px-8 text-center text-base font-semibold text-white outline-none"
        >
          Update
        </button>
          )
        }
        
      </div>
    </form>
  </div>
</div>