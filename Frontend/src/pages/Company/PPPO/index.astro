---
import Layout from '../../../layouts/Layout.astro';
import SideBar from '../../../components/SideBar.astro';
import Breadcrumb from '../../../components/Breadcrumb.astro';
import DatesCard from '../../../components/DatesCard.astro';
import ResponsibleCard from '../../../components/ResponsibleCard.astro';
import StateComponent from '../../../components/StateComponent.astro';
import Graph from '../../../components/GraphLineChart.jsx';

import RealDateGraph from '../../../components/GraphRealTime.jsx';

import { getUser } from '../../../lib/auth';
import DeleteModal from '../../../components/DeleteModal.astro';
import { setFilteredURL, setParentId } from '../../../lib/filters';
import { navigate } from 'astro:transitions/client';
import { getMilestoneFromFather } from '../../../lib/lib';
const url = "http://127.0.0.1:8000";
let cid = await getUser();
if(cid == null){
  return Astro.redirect('/');
}
console.log("user: ");
console.log(cid.idPerson);
let data;


const idPPPO = Astro.url.searchParams.get("idPPPO");
console.log(idPPPO);
async function fetchPPPOs() {
    try {
        const response = await fetch(`${url}/PPPOs/${idPPPO}`);
        if (response.ok) {
            data = await response.json();
            
        } else {
            throw new Error('Error al obtener portfolios');
        }
    } catch (error) {
        console.error(error);
    }
}


await fetchPPPOs();


let milestones = await getMilestoneFromFather(idPPPO);



const graphRealDate= milestones.map(milestone => ({
  date: milestone.real_date,
  pv: milestone.planned_value,
  ac: milestone.actual_cost,
  ev: milestone.earned_value
}));
/*
const totalPlannedValue = milestones.reduce((sum, milestone) => sum + milestone.planned_value, 0);
const totalActualCost = milestones.reduce((sum, milestone) => sum + milestone.actual_cost, 0);
const totalEarnedValue = milestones.reduce((sum, milestone) => sum + milestone.earned_value, 0);

const totalCPI = totalActualCost !== 0 ? (totalEarnedValue / totalActualCost).toFixed(3) : "Not Defined";
const totalSPI = totalPlannedValue !== 0 ? (totalEarnedValue / totalPlannedValue).toFixed(3) : "Not Defined";
console.log("Totla spi");
console.log(totalCPI);
*/

const lastMilestone = milestones.length > 0 ? milestones[milestones.length - 1] : null;
const lastPlannedValue = lastMilestone ? lastMilestone.planned_value : "Not Defined";
const lastActualCost = lastMilestone ? (lastMilestone.actual_cost === 0 ? "Not Defined" : lastMilestone.actual_cost) : "Not Defined";
const lastEarnedValue = lastMilestone ? (lastMilestone.earned_value === 0 ? "Not Defined" : lastMilestone.earned_value) : "Not Defined";
---
<div class="flex">
    <div class="w-1/5 h-full fixed inset-y-0 left-0 min-w-10">
        <SideBar />
    </div>
    <div class="w-4/5 h-full ml-64 flex flex-col justify-center items-center">
        <nav class="w-full">
            <Breadcrumb idPPPO={idPPPO} />
          </nav>
        <br>
        <br>
        
        <div class="grid grid-cols-1 grid-rows-1 md:grid-cols-4">
            <div
              class="ml-10 block rounded-lg bg-white shadow-secondary-1 dark:bg-surface-dark dark:text-white text-surface md:col-span-3">
              <div class="p-6">
                <h5
                  class="mb-2 text-xl font-medium leading-tight">
                  {data.title}  <StateComponent state={data.state} />
                </h5>
                
                <p class="mb-4 text-base">
                    Code:
                    <a class=" text-blue-600 hover:underline" href=`/Company/PPPO/Sons?parentId=${data.idPPPO}&filter=true`>
                        {data.code}
                    </a>
                    
                </p>
                <p class="mb-4 text-base">
                    Risk: 
                     <span class={data.risk === 0 ? "text-green-500" : 
                     data.risk === 1 ? "text-yellow-500" : 
                     "text-red-500"}>  
                     {data.risk === 0 ? "Low" : 
                     data.risk === 1 ? "Medium" :
                     "High"
                   }
                     </span>
                </p>
                <p class="mb-4 text-base">
                    Priority:
                    <span class={data.priority === 0 ? "text-green-500" : 
                    data.priority  === 1 ? "text-yellow-500" : 
                    "text-red-500"}>  
                    {data.priority  === 0 ? "Low" : 
                    data.priority  === 1 ? "Medium" :
                    "High"
                  }
                    </span>
                </p>
                <p class="mb-4 text-base">
                Description: <br>
                 {data.description}
                </p>
                <p class="mb-4 text-base">
                    Strategic Goal: <br>
                     {data.strategic_goal}
                </p>
                {(data.internal_manager == cid.idPerson || data.external_manager == cid.idPerson) && (
                  <div class="w-full flex">
                    <p class="mb-4 text-base m-2">
                        <a class="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" href={`/Company/PPPO/Form?parentId=${data.parent_id}&update=${data.idPPPO}`}>Update</a>
                    </p>
                    <p class="mb-4 text-base m-2">
                        <DeleteModal idPPPO={idPPPO} />
                    </p>
                </div>
                )}
                
                
              </div>
            </div>
          
            <div
              class="mt-3 block rounded-lg bg-white shadow-secondary-1 dark:bg-surface-dark dark:text-white text-surface md:col-span-1">
              <DatesCard sd={data.start_date} srd={data.start_real_date} fd={data.finish_date} frd={data.finish_real_date}  />
              <ResponsibleCard internal={data.internal_manager} external={data.external_manager} />
            </div>
          </div>
          
          <hr class="border bg-white shadow-secondary-1 dark:bg-surface-dark w-full mt-6 mb-6">
          
          <div class="grid grid-rows-1 grid-cols-1 md:grid-cols-4">
            
            <div class="mt-6 md:col-span-3 gap-4 flex items-center justify-center">
              <RealDateGraph data={graphRealDate} />
            </div>
            
            <div class="gap-4 mt-6 md:col-span-1 rounded-lg bg-white shadow-secondary-1 dark:bg-surface-dark dark:text-white text-surface">          
              <div class="p-6 border">
                <h5
                  class="mb-2 text-xl font-medium leading-tight text-center">
                  Economic Values
                </h5>
                <div class="justify-center">
                  <p class="mb-4 text-base">
                    Planned Value (P.V): {lastMilestone === null ? "Not Defined" : lastPlannedValue}
                  </p>
                  <p class="mb-4 text-base">
                    Actual Cost (A.C): {lastMilestone === null ? "Not Defined" : lastActualCost}
                  </p>
                  <p class="mb-4 text-base">
                    Earned Value (E.V): {lastMilestone === null ? "Not Defined" : lastEarnedValue}
                  </p>
                  <p class="mb-4 text-base">
                    Cost Performance Index (C.P.I): {(lastEarnedValue/lastActualCost).toFixed(3)}
                  </p>
                  <p class="mb-4 text-base">
                    Schedule Performance Index (S.P.I): {(lastEarnedValue/lastPlannedValue).toFixed(3)}
                  </p>
                </div>
                
              </div>
            </div>
          </div>
          
          

          <hr class="border bg-white shadow-secondary-1 dark:bg-surface-dark w-full mt-6 mb-6">

          <h5 class="mb-2 text-xl font-medium leading-tight text-center">
            Milestones
          </h5>
         
          <table class="mb-6">
      
            <thead>
              <tr>
                <th class="border p-2">
                  <a href={`/Company/PPPO/Form?parentId=${idPPPO}&update=${""}&milestone=1`}>
                    +
                  </a>
                </th>
                
                
                
              </tr>
            </thead>
            <thead>
                <tr>
                    <th class="border p-2">Title</th>
                    <th class="border p-2">Code</th>
                    <th class="border p-2">Planned Date / <br> Real Date</th>
                    <th class="border p-2">Risk</th>
                    <th class="border p-2">Priority</th>
                    <th class="border p-2">P.V</th>
                    <th class="border p-2">A.C</th>
                    <th class="border p-2">E.V</th>
                    <th class="border p-2">C.P.I</th>
                    <th class="border p-2">S.P.I</th>
                    <th class="border p-2">State</th>
                </tr>
            </thead>
            <tbody class="text-center">
              {
                milestones && milestones.map((milestone) => (
                    <tr >

                        <td class="border p-2 text-blue-600 hover:underline">
                          {milestone.title}
                          
                          </td>
                        <td class="border p-2 text-blue-600 hover:underline">
                          {milestone.code}                         
                          </td>
                          <td class="border p-2">
                              {milestone.planned_date} - <br />
                              <span class={milestone.planned_date === "12/12/2100" ? "text-gray-600" : "text-black"}>
                                {milestone.real_date === "12/12/2100" ? (
                                  "Not Defined"
                                ) : (
                                  <strong>{milestone.real_date}</strong>
                                )}
                              </span>
                            </td>
                        
                        
                        
                        <td class="border p-2">
                          <span class={milestone.risk === 0 ? "text-green-500" : 
                  milestone.risk === 1 ? "text-yellow-500" : 
                  "text-red-500"}>
                          {milestone.risk === 0 ? "Low" : 
                          milestone.risk === 1 ? "Medium" :
                          "High"
                        }
                          </span>
                          </td>
                        <td class="border p-2">
                          <span class={milestone.risk === 0 ? "text-green-500" : 
                          milestone.priority === 1 ? "text-yellow-500" : 
                          "text-red-500"}>  
                          {milestone.priority === 0 ? "Low" : 
                          milestone.priority === 1 ? "Medium" :
                          "High"
                        }
                          </span>
                        </td>
                        <td class="border p-2">{milestone.planned_value} </td>
                        <td class="border p-2">
                          {milestone.actual_cost == 0 ? "Not Defined" : milestone.actual_cost}
                        </td>
                        <td class="border p-2">{milestone.earned_value == 0 ? "Not Defined" : milestone.earned_value}</td>
                        <td class="border p-2">
                          {(milestone.earned_value == 0 || milestone.actual_cost == 0  ) ? "Not Defined" : (milestone.earned_value / milestone.actual_cost).toFixed(3)} 
                          
                        </td>
                        <td class="border p-2">
                          {(milestone.earned_value == 0 || milestone.planned_value == 0  ) ? "Not Defined" : (milestone.earned_value / milestone.planned_value).toFixed(3)}
                        </td>
                        <td class="border p-2 w-20"><StateComponent state={milestone.state} /></td>
                        <td class="border p-2 w-20">
                          <a class="block text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" href={`/Company/PPPO/Form?parentId=${milestone.parent_id}&update=${milestone.idMilestone}&milestone=1`}>Update</a>
                        </td>
                    </tr>
                ))
              }
            </tbody>
        </table>
    </div>
    
    
  
</div>
