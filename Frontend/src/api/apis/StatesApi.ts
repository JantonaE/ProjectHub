/* tslint:disable */
/* eslint-disable */
/**
 * ProjectHub
 * Jesus Antona Espejo
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  State,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StateFromJSON,
    StateToJSON,
} from '../models/index';

export interface CreateStateStatesPostRequest {
    state: State;
}

export interface DeleteStateStatesIdDeleteRequest {
    id: string;
}

export interface FindAllStatesOfTypeStatesTypeStateTypeGetRequest {
    stateType: string;
}

export interface FindDeletedStateByTypeStatesDeletedByTypeStateTypeGetRequest {
    stateType: number;
}

export interface FindOneStateStatesIdGetRequest {
    id: string;
}

export interface UpdateStateStatesIdPutRequest {
    id: string;
    state: State;
}

/**
 * 
 */
export class StatesApi extends runtime.BaseAPI {

    /**
     * Crea un state y lo devuelve
     * Create State
     */
    async createStateStatesPostRaw(requestParameters: CreateStateStatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling createStateStatesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/States/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Crea un state y lo devuelve
     * Create State
     */
    async createStateStatesPost(requestParameters: CreateStateStatesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.createStateStatesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina el state con id pasado por parámetro
     * Delete State
     */
    async deleteStateStatesIdDeleteRaw(requestParameters: DeleteStateStatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteStateStatesIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/States/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el state con id pasado por parámetro
     * Delete State
     */
    async deleteStateStatesIdDelete(requestParameters: DeleteStateStatesIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteStateStatesIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de states filtrados
     * Find All States Of Type
     */
    async findAllStatesOfTypeStatesTypeStateTypeGetRaw(requestParameters: FindAllStatesOfTypeStatesTypeStateTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<State>>> {
        if (requestParameters['stateType'] == null) {
            throw new runtime.RequiredError(
                'stateType',
                'Required parameter "stateType" was null or undefined when calling findAllStatesOfTypeStatesTypeStateTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/StatesType/{state_type}`.replace(`{${"state_type"}}`, encodeURIComponent(String(requestParameters['stateType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StateFromJSON));
    }

    /**
     * Devuelve una lista de states filtrados
     * Find All States Of Type
     */
    async findAllStatesOfTypeStatesTypeStateTypeGet(requestParameters: FindAllStatesOfTypeStatesTypeStateTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<State>> {
        const response = await this.findAllStatesOfTypeStatesTypeStateTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve una lista de states
     * Find All States
     */
    async findAllStatesStatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<State>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/States/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(StateFromJSON));
    }

    /**
     * Devuelve una lista de states
     * Find All States
     */
    async findAllStatesStatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<State>> {
        const response = await this.findAllStatesStatesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el estado con el type pasado por parámetro y estado \'Deleted\'
     * Find Deleted State By Type
     */
    async findDeletedStateByTypeStatesDeletedByTypeStateTypeGetRaw(requestParameters: FindDeletedStateByTypeStatesDeletedByTypeStateTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['stateType'] == null) {
            throw new runtime.RequiredError(
                'stateType',
                'Required parameter "stateType" was null or undefined when calling findDeletedStateByTypeStatesDeletedByTypeStateTypeGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/States/DeletedByType/{state_type}`.replace(`{${"state_type"}}`, encodeURIComponent(String(requestParameters['stateType']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Devuelve el estado con el type pasado por parámetro y estado \'Deleted\'
     * Find Deleted State By Type
     */
    async findDeletedStateByTypeStatesDeletedByTypeStateTypeGet(requestParameters: FindDeletedStateByTypeStatesDeletedByTypeStateTypeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.findDeletedStateByTypeStatesDeletedByTypeStateTypeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el state con id pasado por parámetro
     * Find One State
     */
    async findOneStateStatesIdGetRaw(requestParameters: FindOneStateStatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOneStateStatesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/States/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Devuelve el state con id pasado por parámetro
     * Find One State
     */
    async findOneStateStatesIdGet(requestParameters: FindOneStateStatesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.findOneStateStatesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza el state con id pasado por parámetro y lo devuelve
     * Update State
     */
    async updateStateStatesIdPutRaw(requestParameters: UpdateStateStatesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<State>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateStateStatesIdPut().'
            );
        }

        if (requestParameters['state'] == null) {
            throw new runtime.RequiredError(
                'state',
                'Required parameter "state" was null or undefined when calling updateStateStatesIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/States/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StateToJSON(requestParameters['state']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateFromJSON(jsonValue));
    }

    /**
     * Actualiza el state con id pasado por parámetro y lo devuelve
     * Update State
     */
    async updateStateStatesIdPut(requestParameters: UpdateStateStatesIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<State> {
        const response = await this.updateStateStatesIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
