/* tslint:disable */
/* eslint-disable */
/**
 * ProjectHub
 * Jesus Antona Espejo
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PPPOInput,
  PPPOOutput,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PPPOInputFromJSON,
    PPPOInputToJSON,
    PPPOOutputFromJSON,
    PPPOOutputToJSON,
} from '../models/index';

export interface CreatePppoPPPOsPostRequest {
    pPPOInput: PPPOInput;
}

export interface DeletePppoPPPOsIdDeleteRequest {
    id: string;
}

export interface FindAllPpposFilterPPPOsGetRequest {
    parentId?: string;
    company?: string;
    search?: string;
    plannedValueMin?: number;
    plannedValueMax?: number;
    actualCostMin?: number;
    actualCostMax?: number;
    earnedValueMin?: number;
    earnedValueMax?: number;
    risk?: number;
    priority?: number;
    startDateMin?: string;
    startDateMax?: string;
    startRealDateMin?: string;
    startRealDateMax?: string;
    finishDateMin?: string;
    finishDateMax?: string;
    finishRealDateMin?: string;
    finishRealDateMax?: string;
    sortedBy?: string;
    desc?: boolean;
}

export interface FindOnePppoPPPOsIdGetRequest {
    id: string;
}

export interface FindPppoAncestorWithCodePPPOsBrotherAncestorGetRequest {
    id?: string;
    code?: string;
}

export interface FindPppoAncestorsPPPOsAncestorsIdGetRequest {
    id: string;
}

export interface FindPppoBrothersWithCodePPPOsBrotherGetRequest {
    id?: string;
    code?: string;
}

export interface FindPppoSonsPPPOsSonsIdGetRequest {
    id: string;
}

export interface UpdatePppoPPPOsIdPutRequest {
    id: string;
    pPPOInput: PPPOInput;
}

/**
 * 
 */
export class PPPOsApi extends runtime.BaseAPI {

    /**
     * Crea un pppo y lo devuelve
     * Create Pppo
     */
    async createPppoPPPOsPostRaw(requestParameters: CreatePppoPPPOsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PPPOOutput>> {
        if (requestParameters['pPPOInput'] == null) {
            throw new runtime.RequiredError(
                'pPPOInput',
                'Required parameter "pPPOInput" was null or undefined when calling createPppoPPPOsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/PPPOs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PPPOInputToJSON(requestParameters['pPPOInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PPPOOutputFromJSON(jsonValue));
    }

    /**
     * Crea un pppo y lo devuelve
     * Create Pppo
     */
    async createPppoPPPOsPost(requestParameters: CreatePppoPPPOsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PPPOOutput> {
        const response = await this.createPppoPPPOsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina el pppo con id pasado por parámetro
     * Delete Pppo
     */
    async deletePppoPPPOsIdDeleteRaw(requestParameters: DeletePppoPPPOsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePppoPPPOsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el pppo con id pasado por parámetro
     * Delete Pppo
     */
    async deletePppoPPPOsIdDelete(requestParameters: DeletePppoPPPOsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePppoPPPOsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de PPPO filtrados
     * Find All Pppos Filter
     */
    async findAllPpposFilterPPPOsGetRaw(requestParameters: FindAllPpposFilterPPPOsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PPPOOutput>>> {
        const queryParameters: any = {};

        if (requestParameters['parentId'] != null) {
            queryParameters['parent_id'] = requestParameters['parentId'];
        }

        if (requestParameters['company'] != null) {
            queryParameters['company'] = requestParameters['company'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['plannedValueMin'] != null) {
            queryParameters['planned_valueMin'] = requestParameters['plannedValueMin'];
        }

        if (requestParameters['plannedValueMax'] != null) {
            queryParameters['planned_valueMax'] = requestParameters['plannedValueMax'];
        }

        if (requestParameters['actualCostMin'] != null) {
            queryParameters['actual_costMin'] = requestParameters['actualCostMin'];
        }

        if (requestParameters['actualCostMax'] != null) {
            queryParameters['actual_costMax'] = requestParameters['actualCostMax'];
        }

        if (requestParameters['earnedValueMin'] != null) {
            queryParameters['earned_valueMin'] = requestParameters['earnedValueMin'];
        }

        if (requestParameters['earnedValueMax'] != null) {
            queryParameters['earned_valueMax'] = requestParameters['earnedValueMax'];
        }

        if (requestParameters['risk'] != null) {
            queryParameters['risk'] = requestParameters['risk'];
        }

        if (requestParameters['priority'] != null) {
            queryParameters['priority'] = requestParameters['priority'];
        }

        if (requestParameters['startDateMin'] != null) {
            queryParameters['start_dateMin'] = requestParameters['startDateMin'];
        }

        if (requestParameters['startDateMax'] != null) {
            queryParameters['start_dateMax'] = requestParameters['startDateMax'];
        }

        if (requestParameters['startRealDateMin'] != null) {
            queryParameters['start_real_dateMin'] = requestParameters['startRealDateMin'];
        }

        if (requestParameters['startRealDateMax'] != null) {
            queryParameters['start_real_dateMax'] = requestParameters['startRealDateMax'];
        }

        if (requestParameters['finishDateMin'] != null) {
            queryParameters['finish_dateMin'] = requestParameters['finishDateMin'];
        }

        if (requestParameters['finishDateMax'] != null) {
            queryParameters['finish_dateMax'] = requestParameters['finishDateMax'];
        }

        if (requestParameters['finishRealDateMin'] != null) {
            queryParameters['finish_real_dateMin'] = requestParameters['finishRealDateMin'];
        }

        if (requestParameters['finishRealDateMax'] != null) {
            queryParameters['finish_real_dateMax'] = requestParameters['finishRealDateMax'];
        }

        if (requestParameters['sortedBy'] != null) {
            queryParameters['sortedBy'] = requestParameters['sortedBy'];
        }

        if (requestParameters['desc'] != null) {
            queryParameters['desc'] = requestParameters['desc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PPPOOutputFromJSON));
    }

    /**
     * Devuelve una lista de PPPO filtrados
     * Find All Pppos Filter
     */
    async findAllPpposFilterPPPOsGet(requestParameters: FindAllPpposFilterPPPOsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PPPOOutput>> {
        const response = await this.findAllPpposFilterPPPOsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el pppo con id pasado por parámetro
     * Find One Pppo
     */
    async findOnePppoPPPOsIdGetRaw(requestParameters: FindOnePppoPPPOsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PPPOOutput>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOnePppoPPPOsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PPPOOutputFromJSON(jsonValue));
    }

    /**
     * Devuelve el pppo con id pasado por parámetro
     * Find One Pppo
     */
    async findOnePppoPPPOsIdGet(requestParameters: FindOnePppoPPPOsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PPPOOutput> {
        const response = await this.findOnePppoPPPOsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifica si hay algún hermano con el mismo código del padre
     * Find Pppo Ancestor With Code
     */
    async findPppoAncestorWithCodePPPOsBrotherAncestorGetRaw(requestParameters: FindPppoAncestorWithCodePPPOsBrotherAncestorGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/BrotherAncestor/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verifica si hay algún hermano con el mismo código del padre
     * Find Pppo Ancestor With Code
     */
    async findPppoAncestorWithCodePPPOsBrotherAncestorGet(requestParameters: FindPppoAncestorWithCodePPPOsBrotherAncestorGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.findPppoAncestorWithCodePPPOsBrotherAncestorGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve los ancestros del id pasado por parámetro
     * Find Pppo Ancestors
     */
    async findPppoAncestorsPPPOsAncestorsIdGetRaw(requestParameters: FindPppoAncestorsPPPOsAncestorsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PPPOOutput>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findPppoAncestorsPPPOsAncestorsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/Ancestors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PPPOOutputFromJSON));
    }

    /**
     * Devuelve los ancestros del id pasado por parámetro
     * Find Pppo Ancestors
     */
    async findPppoAncestorsPPPOsAncestorsIdGet(requestParameters: FindPppoAncestorsPPPOsAncestorsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PPPOOutput>> {
        const response = await this.findPppoAncestorsPPPOsAncestorsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verifica si hay algún hermano con el mismo código del padre
     * Find Pppo Brothers With Code
     */
    async findPppoBrothersWithCodePPPOsBrotherGetRaw(requestParameters: FindPppoBrothersWithCodePPPOsBrotherGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<boolean>> {
        const queryParameters: any = {};

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/Brother/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<boolean>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Verifica si hay algún hermano con el mismo código del padre
     * Find Pppo Brothers With Code
     */
    async findPppoBrothersWithCodePPPOsBrotherGet(requestParameters: FindPppoBrothersWithCodePPPOsBrotherGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<boolean> {
        const response = await this.findPppoBrothersWithCodePPPOsBrotherGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve los pppos con parent_id con id pasado por parámetro
     * Find Pppo Sons
     */
    async findPppoSonsPPPOsSonsIdGetRaw(requestParameters: FindPppoSonsPPPOsSonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PPPOOutput>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findPppoSonsPPPOsSonsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/Sons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PPPOOutputFromJSON));
    }

    /**
     * Devuelve los pppos con parent_id con id pasado por parámetro
     * Find Pppo Sons
     */
    async findPppoSonsPPPOsSonsIdGet(requestParameters: FindPppoSonsPPPOsSonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PPPOOutput>> {
        const response = await this.findPppoSonsPPPOsSonsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza el pppo con id pasado por parámetro y lo devuelve
     * Update Pppo
     */
    async updatePppoPPPOsIdPutRaw(requestParameters: UpdatePppoPPPOsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PPPOOutput>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePppoPPPOsIdPut().'
            );
        }

        if (requestParameters['pPPOInput'] == null) {
            throw new runtime.RequiredError(
                'pPPOInput',
                'Required parameter "pPPOInput" was null or undefined when calling updatePppoPPPOsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/PPPOs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PPPOInputToJSON(requestParameters['pPPOInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PPPOOutputFromJSON(jsonValue));
    }

    /**
     * Actualiza el pppo con id pasado por parámetro y lo devuelve
     * Update Pppo
     */
    async updatePppoPPPOsIdPut(requestParameters: UpdatePppoPPPOsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PPPOOutput> {
        const response = await this.updatePppoPPPOsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
