/* tslint:disable */
/* eslint-disable */
/**
 * ProjectHub
 * Jesus Antona Espejo
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PPPOInput,
  PPPOOutput,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PPPOInputFromJSON,
    PPPOInputToJSON,
    PPPOOutputFromJSON,
    PPPOOutputToJSON,
} from '../models/index';

export interface CreatePppoPPPOsPostRequest {
    pPPOInput: PPPOInput;
}

export interface DeletePppoPPPOsIdDeleteRequest {
    id: string;
}

export interface FindOnePppoPPPOsIdGetRequest {
    id: string;
}

export interface FindPppoSonsPPPOsSonsIdGetRequest {
    id: string;
}

export interface UpdatePppoPPPOsIdPutRequest {
    id: string;
    pPPOInput: PPPOInput;
}

/**
 * 
 */
export class PPPOsApi extends runtime.BaseAPI {

    /**
     * Crea un pppo y lo devuelve
     * Create Pppo
     */
    async createPppoPPPOsPostRaw(requestParameters: CreatePppoPPPOsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PPPOOutput>> {
        if (requestParameters['pPPOInput'] == null) {
            throw new runtime.RequiredError(
                'pPPOInput',
                'Required parameter "pPPOInput" was null or undefined when calling createPppoPPPOsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/PPPOs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PPPOInputToJSON(requestParameters['pPPOInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PPPOOutputFromJSON(jsonValue));
    }

    /**
     * Crea un pppo y lo devuelve
     * Create Pppo
     */
    async createPppoPPPOsPost(requestParameters: CreatePppoPPPOsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PPPOOutput> {
        const response = await this.createPppoPPPOsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Elimina el pppo con id pasado por parámetro
     * Delete Pppo
     */
    async deletePppoPPPOsIdDeleteRaw(requestParameters: DeletePppoPPPOsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePppoPPPOsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Elimina el pppo con id pasado por parámetro
     * Delete Pppo
     */
    async deletePppoPPPOsIdDelete(requestParameters: DeletePppoPPPOsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePppoPPPOsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Devuelve una lista de pppos
     * Find All Pppos
     */
    async findAllPpposPPPOsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PPPOOutput>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PPPOOutputFromJSON));
    }

    /**
     * Devuelve una lista de pppos
     * Find All Pppos
     */
    async findAllPpposPPPOsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PPPOOutput>> {
        const response = await this.findAllPpposPPPOsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Devuelve el pppo con id pasado por parámetro
     * Find One Pppo
     */
    async findOnePppoPPPOsIdGetRaw(requestParameters: FindOnePppoPPPOsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PPPOOutput>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findOnePppoPPPOsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PPPOOutputFromJSON(jsonValue));
    }

    /**
     * Devuelve el pppo con id pasado por parámetro
     * Find One Pppo
     */
    async findOnePppoPPPOsIdGet(requestParameters: FindOnePppoPPPOsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PPPOOutput> {
        const response = await this.findOnePppoPPPOsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Devuelve los pppos con parent_id con id pasado por parámetro
     * Find Pppo Sons
     */
    async findPppoSonsPPPOsSonsIdGetRaw(requestParameters: FindPppoSonsPPPOsSonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PPPOOutput>>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling findPppoSonsPPPOsSonsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/PPPOs/Sons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PPPOOutputFromJSON));
    }

    /**
     * Devuelve los pppos con parent_id con id pasado por parámetro
     * Find Pppo Sons
     */
    async findPppoSonsPPPOsSonsIdGet(requestParameters: FindPppoSonsPPPOsSonsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PPPOOutput>> {
        const response = await this.findPppoSonsPPPOsSonsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Actualiza el pppo con id pasado por parámetro y lo devuelve
     * Update Pppo
     */
    async updatePppoPPPOsIdPutRaw(requestParameters: UpdatePppoPPPOsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PPPOOutput>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePppoPPPOsIdPut().'
            );
        }

        if (requestParameters['pPPOInput'] == null) {
            throw new runtime.RequiredError(
                'pPPOInput',
                'Required parameter "pPPOInput" was null or undefined when calling updatePppoPPPOsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/PPPOs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PPPOInputToJSON(requestParameters['pPPOInput']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PPPOOutputFromJSON(jsonValue));
    }

    /**
     * Actualiza el pppo con id pasado por parámetro y lo devuelve
     * Update Pppo
     */
    async updatePppoPPPOsIdPut(requestParameters: UpdatePppoPPPOsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PPPOOutput> {
        const response = await this.updatePppoPPPOsIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
